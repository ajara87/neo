// Copyright (C) 2015-2024 The Neo Project.
//
// UT_DBFT.Setup.cs file belongs to the neo project and is free
// software distributed under the MIT software license, see the
// accompanying file LICENSE in the main directory of the
// repository or http://www.opensource.org/licenses/mit-license.php
// for more details.
//
// Redistribution and use in source and binary forms with or without
// modifications are permitted.

using Akka.Actor;
using Moq;
using Neo.Cryptography.ECC;
using Neo.Extensions;
using Neo.IO;
using Neo.Ledger;
using Neo.Network.P2P;
using Neo.Network.P2P.Payloads;
using Neo.Plugins.DBFTPlugin.Messages;
using Neo.Plugins.DBFTPlugin.Types;
using Neo.SmartContract;
using Neo.SmartContract.Native;
using Neo.UnitTests;
using System;

namespace Neo.Plugins.DBFTPlugin.Tests;

public partial class UT_DBFT
{
    private const byte PrefixBlock = 5;
    private const byte PrefixBlockHash = 9;
    private const byte PrefixCurrentBlock = 12;
    private void SetupMocks()
    {
        _mockLocalNode.SetAutoPilot(new CustomAutoPilot((sender, message) =>
        {
            switch (message)
            {
                case Message msg:
                    // BroadcastMessage(msg);
                    TestContext.WriteLine("Received message: " + message);
                    break;
                case LocalNode.RelayDirectly relay:
                    TestContext.WriteLine("Received message: " + message);
                    // OnRelayDirectly(relay.Inventory);
                    break;
                case LocalNode.SendDirectly send:
                    // OnSendDirectly(send.Inventory);
                    TestContext.WriteLine("Received message: " + message);
                    break;
                case LocalNode.GetInstance _:
                    // Sender.Tell(this);
                    TestContext.WriteLine("Received message: " + message);
                    break;
            }

        }));

        _mockBlockchain.SetAutoPilot(new CustomAutoPilot((sender, message) =>
        {
            switch (message)
            {
                case Blockchain.Reverify reverify:
                    sender.Tell(new Blockchain.RelayResult
                    {
                        Inventory = reverify.Inventories[0],
                        Result = VerifyResult.Succeed
                    });
                    TestContext.WriteLine("Received message: " + message);
                    break;
                case Blockchain.Initialize _:
                    // Handle Initialize message
                    TestContext.WriteLine("Received message: " + message);
                    break;
                case Blockchain.Import import:
                    // Handle Import message
                    // You might want to simulate importing blocks here
                    TestContext.WriteLine("Received message: " + message);
                    break;
                case Blockchain.FillMemoryPool fill:
                    // Handle FillMemoryPool message
                    // You might want to simulate filling the memory pool here
                    TestContext.WriteLine("Received message: " + message);
                    break;
                case Header headers:
                    // Handle new headers
                    // You might want to simulate processing new headers here
                    TestContext.WriteLine("Received message: " + message);
                    break;
                case Block block:
                    // Handle new block
                    // You might want to simulate processing a new block here
                    TestContext.WriteLine("Received message: " + message);
                    break;
                case Transaction tx:
                    // Handle new transaction
                    // You might want to simulate processing a new transaction here
                    TestContext.WriteLine("Received message: " + message);
                    break;
                case IInventory inventory:
                    // Handle generic inventory
                    // You might want to simulate processing generic inventory here
                    TestContext.WriteLine("Received message: " + message);
                    break;
                case TransactionRouter.PreverifyCompleted task:
                    // Handle preverify completed
                    // You might want to simulate completion of preverification here
                    TestContext.WriteLine("Received message: " + message);
                    break;
                    // case Neo.IO.Actors.Idle _:
                    // Handle Idle message
                    // You might want to simulate idle behavior here
                    TestContext.WriteLine("Received message: " + message);
                    break;
                default:
                    // Handle any other messages
                    TestContext.WriteLine("Unhandled message type in mock blockchain");
                    break;
            }
        }));

        SetupTaskManagerMock();
    }

    private void SetupTaskManagerMock()
    {
        _mockTaskManager.Setup(tm => tm.Tell(It.IsAny<object>(), It.IsAny<IActorRef>()));
    }

    private void SetupTxRouterMock()
    {
        _txRouter.Setup(tm => tm.Tell(It.IsAny<object>(), It.IsAny<IActorRef>()));
    }

    private Settings CreateTestSettings()
    {
        return new Settings();
    }

    private ECPoint[] CreateTestValidators()
    {
        return
        [
            //Validators
            ECPoint.Parse("0278ed78c917797b637a7ed6e7a9d94e8c408444c41ee4c0a0f310a256b9271eda", ECCurve.Secp256r1),
            ECPoint.Parse("02e691f222d1867098643aca188a3d290c2da98af9e1bcf94b35d67322c034988d", ECCurve.Secp256r1),
            ECPoint.Parse("03e556db7d519f65f43437251e8fd7df476f2d02a0e3ef3052c298791b7b1d812d", ECCurve.Secp256r1),
            ECPoint.Parse("030459831e43793a1f7a104692cd944eaa475b03a0c5298d9fbbca136c8268f978", ECCurve.Secp256r1),
            ECPoint.Parse("03f01c078f19887a525897ec6503f310170deab72c4ae672eef0ac45f46b082eee", ECCurve.Secp256r1),
            ECPoint.Parse("02226db3e9fe07d83ccedae8fd8f8cc12aff4ef541f06fedf9caa1828683829b9e", ECCurve.Secp256r1),
            ECPoint.Parse("03cce2da0e69b79d1aa5bec1378497be41567feac5f2dfb754b46fa421ec08c49e", ECCurve.Secp256r1)
        ];
    }

    private void SetupConsensusToBePrimary()
    {
        s_currentIndex = _primaryIndex;
    }

    private void SetupConsensusToBeBackup()
    {
        s_currentIndex = 2;
    }

    private void SetupMockStorage()
    {
        var walletAccount = _walletAccounts[s_currentIndex];
        var key = new KeyBuilder(NativeContract.GAS.Id, 20).Add(walletAccount.ScriptHash);
        _memoryStore.Put(key.ToArray(), new StorageItem(new AccountState()
        {
            Balance = 100_000_000 * NativeContract.GAS.Factor
        }).ToArray());

        var genesis = NeoSystem.CreateGenesisBlock(TestProtocolSettings.Default);
        _memoryStore.Put(NativeContract.Ledger.CreateStorageKey(PrefixCurrentBlock).ToArray(), new StorageItem(new HashIndexState
        {
            Hash = genesis.Hash,
            Index = 0,
        }).ToArray());

        _memoryStore.Put(NativeContract.Ledger.CreateStorageKey(PrefixBlockHash, genesis.Index).ToArray(), new StorageItem(genesis.Hash.ToArray()).ToArray());
        _memoryStore.Put(NativeContract.Ledger.CreateStorageKey(PrefixBlock, genesis.Hash).ToArray(), new StorageItem(genesis.ToTrimmedBlock().ToArray()).ToArray());

        // Add new storage items
        _memoryStore.Put([0xff, 0xff, 0xff, 0xff, 0x0c, 0xff, 0xff, 0xff, 0xf7],
            [0x58,
                0x87,
                0x17,
                0x11,
                0x7e,
                0x0a,
                0xa8,
                0x10,
                0x72,
                0xaf,
                0xab,
                0x71,
                0xd2,
                0xdd,
                0x89,
                0xfe,
                0x7c,
                0x4b,
                0x92,
                0xfe
            ]);

        _memoryStore.Put("ffffffff0cfffffff7".HexToBytes(), "588717117e0aa81072afab71d2dd89fe7c4b92fe".HexToBytes());
        _memoryStore.Put("f9ffffff12".HexToBytes(), "1e".HexToBytes());
        _memoryStore.Put("ffffffff0cfffffff8".HexToBytes(), "e295e391544c178ad94f03ec4dcdff78534ecf49".HexToBytes());
        _memoryStore.Put("f9ffffff13".HexToBytes(), "a08601".HexToBytes());
        _memoryStore.Put("ffffffff0cfffffff9".HexToBytes(), "7bc681c0a1f71d543457b68bba8d5f9fdd4e5ecc".HexToBytes());
        _memoryStore.Put("ffffffff0cfffffffa".HexToBytes(), "cf76e28bd0062c4a478ee35561011319f3cfa4d2".HexToBytes());
        _memoryStore.Put("ffffffff0cfffffffb".HexToBytes(), "f563ea40bc283d4d0e05c48ea305b3f2a07340ef".HexToBytes());
        _memoryStore.Put("ffffffff08c0ef39cee0e4e925c6c2a06a79e1440dd86fceac".HexToBytes(), "40052101fe21002814c0ef39cee0e4e925c6c2a06a79e1440dd86fceac28e14e4546336e656f2d636f72652d76332e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009310411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674031b2b576410828065374644c6962400048004000410240154105280461746f6940014102280576616c7565210113210111210020014105280461746f6940024102280576616c75652101134102280462617365210111210111210107200141052811626173653538436865636b4465636f64654001410228017321011321011221010e200141052811626173653538436865636b456e636f64654001410228046461746121011221011321011520014105280c6261736535384465636f64654001410228017321011321011221011c20014105280c626173653538456e636f64654001410228046461746121011221011321012320014105280c6261736536344465636f64654001410228017321011321011221012a20014105280c626173653634456e636f64654001410228046461746121011221011321013120014105280b646573657269616c697a6540014102280464617461210112210021013820014105280469746f6140014102280576616c756521011121011321013f20014105280469746f6140024102280576616c7565210111410228046261736521011121011321014620014105280f6a736f6e446573657269616c697a654001410228046a736f6e210112210021014d20014105280d6a736f6e53657269616c697a654001410228046974656d210021011221015420014105280d6d656d6f7279436f6d7061726540024102280473747231210112410228047374723221011221011121015b20014105280c6d656d6f72795365617263684002410228036d656d2101124102280576616c756521011221011121016220014105280c6d656d6f72795365617263684003410228036d656d2101124102280576616c756521011241022805737461727421011121011121016920014105280c6d656d6f72795365617263684004410228036d656d2101124102280576616c7565210112410228057374617274210111410228086261636b7761726421011021011121017020014105280973657269616c697a654001410228046974656d21002101122101772001410528067374724c656e40014102280373747221011321011121017e20014105280b737472696e6753706c697440024102280373747221011341022809736570617261746f722101132101202102850020014105280b737472696e6753706c697440034102280373747221011341022809736570617261746f722101134102281272656d6f7665456d707479456e747269657321011021012021028c0020014000400141020000400028046e756c6c".HexToBytes());
        _memoryStore.Put("ffffffff0cfffffffc".HexToBytes(), "bef2043140362a77c15099c7e64c12f700b665da".HexToBytes());
        _memoryStore.Put("ffffffff0cfffffffd".HexToBytes(), "1bf575ab1189688413610a35a12886cde0b66c72".HexToBytes());
        _memoryStore.Put("ffffffff0cfffffffe".HexToBytes(), "c0ef39cee0e4e925c6c2a06a79e1440dd86fceac".HexToBytes());
        _memoryStore.Put("ffffffff0cffffffff".HexToBytes(), "fda3fa4346ea532a258fc497ddaddb6437c9fdff".HexToBytes());
        _memoryStore.Put("ffffffff08fda3fa4346ea532a258fc497ddaddb6437c9fdff".HexToBytes(), "40052101ff21002814fda3fa4346ea532a258fc497ddaddb6437c9fdff289b4e4546336e656f2d636f72652d76332e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004d10411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b67404811394141082812436f6e74726163744d616e6167656d656e744000480040004102400b410528066465706c6f794002410228076e656646696c65210112410228086d616e696665737421011221012021002000410528066465706c6f794003410228076e656646696c65210112410228086d616e69666573742101124102280464617461210021012021010720004105280764657374726f7940002102ff0021010e20004105280b676574436f6e74726163744001410228046861736821011421012021011520014105280f676574436f6e747261637442794964400141022802696421011121012021011c200141052811676574436f6e747261637448617368657340002101302101232001410528176765744d696e696d756d4465706c6f796d656e74466565400021011121012a2001410528096861734d6574686f6440034102280468617368210114410228066d6574686f642101134102280670636f756e742101112101102101312001410528177365744d696e696d756d4465706c6f796d656e7446656540014102280576616c75652101112102ff002101382000410528067570646174654002410228076e656646696c65210112410228086d616e69666573742101122102ff0021013f2000410528067570646174654003410228076e656646696c65210112410228086d616e6966657374210112410228046461746121002102ff0021014620004003410228064465706c6f794001410228044861736821011441022806557064617465400141022804486173682101144102280744657374726f7940014102280448617368210114400141020000400028046e756c6c".HexToBytes());
        _memoryStore.Put("f7ffffff05".HexToBytes(), "80f0fa02".HexToBytes());
        _memoryStore.Put("f7ffffff09".HexToBytes(), "".HexToBytes());
        _memoryStore.Put("faffffff140f5a3d378200a00eae14cd0cd10f9a6791a7b945".HexToBytes(), "410121070000c16ff28623".HexToBytes());
        _memoryStore.Put("ffffffff08bef2043140362a77c15099c7e64c12f700b665da".HexToBytes(), "40052101fc21002814bef2043140362a77c15099c7e64c12f700b665da28864e4546336e656f2d636f72652d76332e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003810411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b67409d382d424108280e4c6564676572436f6e7472616374400048004000410240084105280b63757272656e74486173684000210115210020014105280c63757272656e74496e6465784000210111210107200141052808676574426c6f636b40014102280b696e6465784f724861736821011221012021010e20014105280e6765745472616e73616374696f6e400141022804686173682101152101202101152001410528176765745472616e73616374696f6e46726f6d426c6f636b400241022810626c6f636b496e6465784f7248617368210112410228077478496e64657821011121012021011c2001410528146765745472616e73616374696f6e486569676874400141022804686173682101152101112101232001410528156765745472616e73616374696f6e5369676e6572734001410228046861736821011521012021012a2001410528156765745472616e73616374696f6e564d53746174654001410228046861736821011521011121013120014000400141020000400028046e756c6c".HexToBytes());
        _memoryStore.Put("fcffffff0900000000".HexToBytes(), "4abbc9a400e02cc51a3664adebddf0838b4e8c82214a1680d6c058ebc549aa30".HexToBytes());
        _memoryStore.Put("ffffffff081bf575ab1189688413610a35a12886cde0b66c72".HexToBytes(), "40052101fd210028141bf575ab1189688413610a35a12886cde0b66c72289b4e4546336e656f2d636f72652d76332e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004d10411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b6740481139414108280943727970746f4c69624000480040004102400b4105280b626c7331323338314164644002410228017821013041022801792101302101302100200141052813626c733132333831446573657269616c697a654001410228046461746121011221013021010720014105280d626c733132333831457175616c40024102280178210130410228017921013021011021010e20014105280b626c7331323338314d756c40034102280178210130410228036d756c210112410228036e656721011021013021011520014105280f626c73313233383150616972696e67400241022802673121013041022802673221013021013021011c200141052811626c73313233383153657269616c697a65400141022801672101302101122101232001410528096b656363616b3235364001410228046461746121011221011221012a2001410528086d75726d75723332400241022804646174612101124102280473656564210111210112210131200141052809726970656d64313630400141022804646174612101122101122101382001410528067368613235364001410228046461746121011221011221013f20014105280f7665726966795769746845434473614004410228076d657373616765210112410228067075626b6579210112410228097369676e61747572652101124102280963757276654861736821011121011021014620014000400141020000400028046e756c6c".HexToBytes());
        _memoryStore.Put("fcffffff054abbc9a400e02cc51a3664adebddf0838b4e8c82214a1680d6c058ebc549aa30".HexToBytes(), "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000088ea19ef550100001dac2b7c000000000000000000c7bef7bf2c5d7b35efa3a4846df9a7b3544ade8b0100011100".HexToBytes());
        _memoryStore.Put("ffffffff08588717117e0aa81072afab71d2dd89fe7c4b92fe".HexToBytes(), "40052101f721002814588717117e0aa81072afab71d2dd89fe7c4b92fe28714e4546336e656f2d636f72652d76332e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002310411af77b674010411af77b674010411af77b674010411af77b674010411af77b67405141c79e4108280e4f7261636c65436f6e7472616374400048004000410240054105280666696e69736840002102ff002100200041052808676574507269636540002101112101072001410528077265717565737440054102280375726c2101134102280666696c7465722101134102280863616c6c6261636b21011341022808757365724461746121004102280e676173466f72526573706f6e73652101112102ff0021010e200041052808736574507269636540014102280570726963652101112102ff00210115200041052806766572696679400021011021011c200140024102280d4f7261636c655265717565737440044102280249642101114102280f52657175657374436f6e74726163742101144102280355726c2101134102280646696c7465722101134102280e4f7261636c65526573706f6e736540024102280249642101114102280a4f726967696e616c5478210115400141020000400028046e756c6c".HexToBytes());
        _memoryStore.Put("ffffffff0f".HexToBytes(), "01".HexToBytes());
        _memoryStore.Put("fbffffff1d00000000".HexToBytes(), "0065cd1d".HexToBytes());
        _memoryStore.Put("ffffffff14".HexToBytes(), "00ca9a3b".HexToBytes());
        _memoryStore.Put("faffffff14c7bef7bf2c5d7b35efa3a4846df9a7b3544ade8b".HexToBytes(), "410121070000d5585f7912".HexToBytes());
        _memoryStore.Put("ffffffff08e295e391544c178ad94f03ec4dcdff78534ecf49".HexToBytes(), "40052101f821002814e295e391544c178ad94f03ec4dcdff78534ecf49285c4e4546336e656f2d636f72652d76332e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e10411af77b674010411af77b6740a621a13a4108280e526f6c654d616e6167656d656e74400048004000410240024105280f64657369676e6174654173526f6c65400241022804726f6c65210111410228056e6f6465732101202102ff00210020004105281367657444657369676e617465644279526f6c65400241022804726f6c6521011141022805696e646578210111210120210107200140014102280b44657369676e6174696f6e400241022804526f6c652101114102280a426c6f636b496e646578210111400141020000400028046e756c6c".HexToBytes());
        _memoryStore.Put("fcffffff0c".HexToBytes(), "410228204abbc9a400e02cc51a3664adebddf0838b4e8c82214a1680d6c058ebc549aa302100".HexToBytes());
        _memoryStore.Put("ffffffff08cf76e28bd0062c4a478ee35561011319f3cfa4d2".HexToBytes(), "40052101fa21002814cf76e28bd0062c4a478ee35561011319f3cfa4d228714e4546336e656f2d636f72652d76332e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002310411af77b674010411af77b674010411af77b674010411af77b674010411af77b67405141c79e41082808476173546f6b656e40004800400128064e45502d3137410240054105280962616c616e63654f664001410228076163636f756e742101142101112100200141052808646563696d616c73400021011121010720014105280673796d626f6c400021011321010e20014105280b746f74616c537570706c7940002101112101152001410528087472616e7366657240044102280466726f6d21011441022802746f21011441022806616d6f756e742101114102280464617461210021011021011c20004001410228085472616e7366657240034102280466726f6d21011441022802746f21011441022806616d6f756e74210111400141020000400028046e756c6c".HexToBytes());
        _memoryStore.Put("fbffffff01".HexToBytes(), "".HexToBytes());
        _memoryStore.Put("fbffffff14c7bef7bf2c5d7b35efa3a4846df9a7b3544ade8b".HexToBytes(), "4104210400e1f5052100002100".HexToBytes());
        _memoryStore.Put("fbffffff0b".HexToBytes(), "00e1f505".HexToBytes());
        _memoryStore.Put("fbffffff0d".HexToBytes(), "00e8764817".HexToBytes());
        _memoryStore.Put("fbffffff0e".HexToBytes(), "4015410228210327708fd7a39d384cd1cc48803a084a43d3b5013ada9de299a12e7b7afccfa01321004102282102e691f222d1867098643aca188a3d290c2da98af9e1bcf94b35d67322c034988d21004102282103e556db7d519f65f43437251e8fd7df476f2d02a0e3ef3052c298791b7b1d812d210041022821030459831e43793a1f7a104692cd944eaa475b03a0c5298d9fbbca136c8268f97821004102282103f01c078f19887a525897ec6503f310170deab72c4ae672eef0ac45f46b082eee21004102282102226db3e9fe07d83ccedae8fd8f8cc12aff4ef541f06fedf9caa1828683829b9e21004102282103cce2da0e69b79d1aa5bec1378497be41567feac5f2dfb754b46fa421ec08c49e210041022821023a36c72844610b4d34d1968662424011bf783ca9d984efa19a20babf5582f3fe21004102282103708b860c1de5d87f5b151a12c2a99feebd2e8b315ee8e7cf8aa19692a9e1837921004102282103c6aa6e12638b36e88adc1ccdceac4db9929575c3e03576c617c49cce7114a05021004102282103204223f8c86b8cd5c89ef12e4f0dbb314172e9241e30c9ef2293790793537cf021004102282102a62c915cf19c7f19a50ec217e79fac2439bbaad658493de0c7d8ffa92ab0aa6221004102282103409f31f0d66bdc2f70a9730b66fe186658f84a8018204db01c106edc36553cd02100410228210288342b141c30dc8ffcde0204929bb46aed5756b41ef4a56778d15ada8f0c6654210041022821020f2887f41474cfeb11fd262e982051c1541418137c02a0f4961af911045de6392100410228210222038884bbd1d8ff109ed3bdef3542e768eef76c1247aea8bc8171f532928c3021004102282103d281b42002647f0113f36c7b8efb30db66078dfaaa9ab3ff76d043a98d512fde21004102282102504acbc1f4b3bdad1d86d6e1a08603771db135a73e61c9d565ae06a1938cd2ad2100410228210226933336f1b75baa42d42b71d9091508b638046d19abd67f4e119bf64a7cfb4d21004102282103cdcea66032b82f5c30450e381e5295cae85c5e6943af716cc6b646352a6067dc21004102282102cd5a5547119e24feaa7c2a0f37b8c9366216bab7054de0065c9be42084003c8a2100".HexToBytes());
        _memoryStore.Put("ffffffff08f563ea40bc283d4d0e05c48ea305b3f2a07340ef".HexToBytes(), "40052101fb21002814f563ea40bc283d4d0e05c48ea305b3f2a07340ef28da4e4546336e656f2d636f72652d76332e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008c10411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b6740e15d044f410828084e656f546f6b656e40004800400128064e45502d3137410240144105280962616c616e63654f664001410228076163636f756e742101142101112100200141052808646563696d616c73400021011121010720014105280f6765744163636f756e7453746174654001410228076163636f756e7421011421012021010e200141052810676574416c6c43616e64696461746573400021013021011520014105281067657443616e646964617465566f74654001410228067075624b657921011621011121011c20014105280d67657443616e64696461746573400021012021012320014105280c676574436f6d6d6974746565400021012021012a200141052813676574436f6d6d697474656541646472657373400021011421013120014105280e676574476173506572426c6f636b40002101112101382001410528166765744e657874426c6f636b56616c696461746f7273400021012021013f200141052810676574526567697374657250726963654000210111210146200141052811726567697374657243616e6469646174654001410228067075626b657921011621011021014d20004105280e736574476173506572426c6f636b40014102280b676173506572426c6f636b2101112102ff002101542000410528107365745265676973746572507269636540014102280d726567697374657250726963652101112102ff0021015b20004105280673796d626f6c400021011321016220014105280b746f74616c537570706c7940002101112101692001410528087472616e7366657240044102280466726f6d21011441022802746f21011441022806616d6f756e742101114102280464617461210021011021017020004105280c756e636c61696d65644761734002410228076163636f756e7421011441022803656e64210111210111210177200141052813756e726567697374657243616e6469646174654001410228067075626b657921011621011021017e200041052804766f74654002410228076163636f756e7421011441022806766f7465546f2101162101102102850020004004410228085472616e7366657240034102280466726f6d21011441022802746f21011441022806616d6f756e742101114102281543616e64696461746553746174654368616e6765644003410228067075626b65792101164102280a7265676973746572656421011041022805766f74657321011141022804566f74654004410228076163636f756e742101144102280466726f6d21011641022802746f21011641022806616d6f756e7421011141022810436f6d6d69747465654368616e6765644002410228036f6c64210120410228036e6577210120400141020000400028046e756c6c".HexToBytes());
        _memoryStore.Put("ffffffff087bc681c0a1f71d543457b68bba8d5f9fdd4e5ecc".HexToBytes(), "40052101f9210028147bc681c0a1f71d543457b68bba8d5f9fdd4e5ecc289b4e4546336e656f2d636f72652d76332e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004d10411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b674010411af77b6740481139414108280e506f6c696379436f6e74726163744000480040004102400b4105280c626c6f636b4163636f756e744001410228076163636f756e74210114210110210020004105280f67657441747472696275746546656540014102280d6174747269627574655479706521011121011121010720014105281067657445786563466565466163746f72400021011121010e20014105280d67657446656550657242797465400021011121011520014105280f67657453746f726167655072696365400021011121011c2001410528096973426c6f636b65644001410228076163636f756e7421011421011021012320014105280f73657441747472696275746546656540024102280d617474726962757465547970652101114102280576616c75652101112102ff0021012a20004105281073657445786563466565466163746f7240014102280576616c75652101112102ff0021013120004105280d7365744665655065724279746540014102280576616c75652101112102ff0021013820004105280f73657453746f72616765507269636540014102280576616c75652101112102ff0021013f20004105280e756e626c6f636b4163636f756e744001410228076163636f756e7421011421011021014620004000400141020000400028046e756c6c".HexToBytes());
        _memoryStore.Put("faffffff0b".HexToBytes(), "80f0cf5b5f7912".HexToBytes());
        _memoryStore.Put("f9ffffff0a".HexToBytes(), "e803".HexToBytes());



    }

    private static Transaction CreateMockTransaction()
    {
        return new Transaction
        {
            Version = 0,
            Nonce = 1,
            SystemFee = 1000,
            NetworkFee = 1000,
            ValidUntilBlock = 1000,
            Attributes = [],
            Signers = [new Signer { Account = UInt160.Zero }],
            Script = new byte[] { 0x01 },
            Witnesses = [new Witness { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() }]
        };
    }

    private ExtensiblePayload CreateMockPrepareRequest()
    {
        var prepareRequest = new PrepareRequest
        {
            Version = 0,
            PrevHash = UInt256.Zero,
            BlockIndex = 2,
            ViewNumber = 0,
            Timestamp = TimeProvider.Current.UtcNow.ToTimestampMS(),
            Nonce = 1,
            TransactionHashes = [UInt256.Zero],
            ValidatorIndex = 0
        };

        return new ExtensiblePayload
        {
            Category = "dBFT",
            ValidBlockStart = 0,
            ValidBlockEnd = 2,
            Sender = Contract.CreateSignatureRedeemScript(_testValidators[0]).ToScriptHash(),
            Data = prepareRequest.ToArray(),
            Witness = new Witness { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() }
        };
    }

    private ExtensiblePayload CreateMockPrepareResponse()
    {
        var prepareResponse = new PrepareResponse
        {
            BlockIndex = 2,
            ViewNumber = 0,
            ValidatorIndex = 1,
            PreparationHash = UInt256.Zero
        };

        return new ExtensiblePayload
        {
            Category = "dBFT",
            ValidBlockStart = 0,
            ValidBlockEnd = 2,
            Sender = Contract.CreateSignatureRedeemScript(_testValidators[1]).ToScriptHash(),
            Data = prepareResponse.ToArray(),
            Witness = new Witness { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() }
        };
    }

    private ExtensiblePayload CreateMockChangeView()
    {
        var changeView = new ChangeView
        {
            ViewNumber = 0,
            BlockIndex = 2,
            ValidatorIndex = 1,
            Timestamp = TimeProvider.Current.UtcNow.ToTimestampMS(),
            Reason = ChangeViewReason.Timeout
        };

        return new ExtensiblePayload
        {
            Category = "dBFT",
            ValidBlockStart = 0,
            ValidBlockEnd = 2,
            Sender = Contract.CreateSignatureRedeemScript(_testValidators[1]).ToScriptHash(),
            Data = changeView.ToArray(),
            Witness = new Witness { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() }
        };
    }
}
